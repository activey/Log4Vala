/* log4vala-0.0.1.vapi generated by (null) 0.28.0, do not modify. */

namespace Log4Vala {
	namespace Appender {
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public class FileAppender : GLib.Object, Log4Vala.Appender.IAppender {
			public FileAppender ();
			public void close_file ();
			public string buffered { get; set; }
			public string filename { get; set; }
			public string mode { get; set; }
		}
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public class ScreenAppender : GLib.Object, Log4Vala.Appender.IAppender {
			public ScreenAppender ();
			public string stderr { get; set; }
		}
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public class SocketAppender : GLib.Object, Log4Vala.Appender.IAppender {
			public SocketAppender ();
			public string host { get; set; }
			public string port { get; set; }
			public string protocol { get; set; }
		}
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public interface IAppender : GLib.Object {
			public abstract void append (Log4Vala.LogEvent event);
			public abstract Log4Vala.Layout.ILayout? layout { get; set; }
			public abstract string name { get; set; }
		}
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public errordomain ConnectionError {
			CANNOT_RESOLVE,
			CANNOT_CONNECT
		}
	}
	namespace Layout {
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public class DescriptiveLayout : GLib.Object, Log4Vala.Layout.ILayout {
			public const string error_format;
			public DescriptiveLayout ();
		}
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public class PatternLayout : GLib.Object, Log4Vala.Layout.ILayout {
			public const string DESCRIPTIVE_PATTERN;
			public const string SIMPLE_PATTERN;
			public PatternLayout ();
			public string pattern { get; set; }
		}
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public class SimpleLayout : GLib.Object, Log4Vala.Layout.ILayout {
			public SimpleLayout ();
		}
		[CCode (cheader_filename = "log4vala-0.0.1.h")]
		public interface ILayout : GLib.Object {
			public abstract string format (Log4Vala.LogEvent event);
			public abstract string footer { get; set; }
			public abstract string header { get; set; }
		}
	}
	[CCode (cheader_filename = "log4vala-0.0.1.h")]
	public class Config : GLib.Object {
		public void add_appender (string appender_name, Log4Vala.Appender.IAppender appender);
		public void add_logger (string logger_name, Log4Vala.LoggerConfig config);
		public Log4Vala.Appender.IAppender[] get_appenders_for_logger (string name);
		public static Log4Vala.Config get_config ();
		public Log4Vala.Level get_level_for_logger (string name);
		public void parse_config ();
		public void parse_config_line (ref string line_to_parse);
		public void remove_appender (string appender_name);
		public void remove_logger (string logger_name);
		public string config_file { get; set; }
		public Log4Vala.Appender.IAppender root_appender { get; set; }
		public Log4Vala.Level root_level { get; set; }
		public bool translate_type_name { get; set; }
	}
	[CCode (cheader_filename = "log4vala-0.0.1.h")]
	public class LogEvent : GLib.Object {
		public LogEvent ();
		public LogEvent.with_message (string logger_name, Log4Vala.Level log_level, string? message = null, GLib.Error? error = null, GLib.DateTime timestamp = new GLib.DateTime.now_utc ());
		public GLib.Error? error { get; set; }
		public Log4Vala.Level log_level { get; set; }
		public string logger_name { get; set; }
		public string? message { get; set; }
		public int process_id { get; set; }
		public int64 thread_id { get; set; }
		public GLib.DateTime timestamp { get; set; }
	}
	[CCode (cheader_filename = "log4vala-0.0.1.h")]
	public class Logger : GLib.Object {
		public void debug (string message, GLib.Error? e = null);
		public async void debug_async (string message, GLib.Error? e = null);
		public void error (string message, GLib.Error? e = null);
		public async void error_async (string message, GLib.Error? e = null);
		public void fatal (string message, GLib.Error? e = null);
		public async void fatal_async (string message, GLib.Error? e = null);
		public static Log4Vala.Logger get_logger (string name);
		public static Log4Vala.Logger get_logger_for_object (GLib.Object object);
		public void info (string message, GLib.Error? e = null);
		public async void info_async (string message, GLib.Error? e = null);
		public void log (Log4Vala.Level log_level, string message, GLib.Error? e = null);
		public async void log_async (Log4Vala.Level log_level, string message, GLib.Error? e = null);
		public void trace (string message, GLib.Error? e = null);
		public async void trace_async (string message, GLib.Error? e = null);
		public void warn (string message, GLib.Error? e = null);
		public async void warn_async (string message, GLib.Error? e = null);
		public Log4Vala.Level log_level { get; set; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "log4vala-0.0.1.h")]
	public class LoggerConfig {
		public string[] appenders;
		public Log4Vala.Level? level;
		public LoggerConfig (string[] appenders, Log4Vala.Level? level);
		public LoggerConfig.from_config (string config_value);
	}
	[CCode (cheader_filename = "log4vala-0.0.1.h")]
	public enum Level {
		TRACE,
		DEBUG,
		INFO,
		WARN,
		ERROR,
		FATAL;
		public string friendly ();
		public static Log4Vala.Level? get_by_name (string name);
	}
	[CCode (cheader_filename = "log4vala-0.0.1.h")]
	public static void init (string? config_file = null);
	[CCode (cheader_filename = "log4vala-0.0.1.h")]
	public static void init_and_watch (string? config_file = null, int interval = 30);
}
